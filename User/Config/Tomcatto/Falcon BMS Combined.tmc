/*-------------------------------------------------------------------------------
  --
  -- Falcon BMS Combined.tmc
  --  based on ViperTQSLEDSync.tmc by slughead (scubapics)
  --
  -- Use at own risk without warranty.
  --
  -- Target script which combines HOTAS Cougar Stick for curves and 
  -- to set the state of LEDs on a Thrustmaster ViperTQS.
  -- Receives TCP packets on port 2323 that indicate the state for
  -- gear and RWR lamps of the F-16C_50.
  --
  -- Full credit to slughead (scubapics) for all LED work
  -- Author: tomcattwo
  -- Date: 01/29/2024
  --
  ------------------------------------------------------------------------------*/

include "target.tmh"

define LED_GEAR_NOSE         1
define LED_GEAR_LEFT         2
define LED_GEAR_RIGHT        3
define LED_GEAR_WARNING      19
define LED_RWR_SEARCH        14
define LED_RWR_A_POWER       15
define LED_RWR_LOW_ALT_RED   16
define LED_RWR_LOW_ALT_GREEN 17
define LED_RWR_SYSTEM_POWER  18

define LED_USER_LEFT_1 12
define LED_USER_LEFT_2 10
define LED_USER_LEFT_3 8
define LED_USER_LEFT_4 6
define LED_USER_LEFT_5 4

define LED_USER_RIGHT_1 13
define LED_USER_RIGHT_2 11
define LED_USER_RIGHT_3 9
define LED_USER_RIGHT_4 7
define LED_USER_RIGHT_5 5

//MFD Definitions (not integrated into ViperTQS LED Code)
define LED_LMFD_1 1
define LED_LMFD_2 2
define LED_RMFD_1 1
define LED_RMFD_2 2

define LED_STATE_OFF 0
define LED_STATE_ON  1

// GEAR NOSE (OFF/GREEN/RED/YELLOW/BLUE/LBLUE/PURPLE/WHITE)
// GEAR LEFT (OFF/GREEN/RED/YELLOW/BLUE/LBLUE/PURPLE/WHITE)
// GEAR RIGHT (OFF/GREEN/RED/YELLOW/BLUE/LBLUE/PURPLE/WHITE)
// GEAR WARNING (OFF/RED)
// SEARCH (OFF/GREEN)
// A POWER (OFF/GREEN)
// LOW ALT (OFF/RED)
// LOW ALT (OFF/GREEN)
// SYSTEM POWER (OFF/GREEN)

// LEFT MFD #1 (OFF/GREEN) Normally ON
// LEFT MFD #2 (OFF/GREEN) Normally OFF
// RIGHT MFD #1 (OFF/GREEN) Normally OFF
//RIGHT MFD #2 (OFF/GREEN) Normally ON

int main()
{
    Configure(&Throttle, MODE_EXCLUDED);
    Configure(&Joystick, MODE_EXCLUDED);
    Configure(&JoystickF18, MODE_EXCLUDED);
    //Configure(&LMFD, MODE_EXCLUDED);
    //Configure(&RMFD, MODE_EXCLUDED);
    //Configure(&HCougar, MODE_EXCLUDED);    
    Configure(&T16000, MODE_EXCLUDED);
    Configure(&T16000L, MODE_EXCLUDED);
    Configure(&TWCSThrottle, MODE_EXCLUDED);
    Configure(&TFRPRudder, MODE_EXCLUDED);
    Configure(&TFRPHARudder, MODE_EXCLUDED);
    Configure(&A320Pilot, MODE_EXCLUDED);
    Configure(&A320Copilot, MODE_EXCLUDED);
    Configure(&TCAQuadrant12, MODE_EXCLUDED);
    Configure(&TCAQuadrant34, MODE_EXCLUDED);
    Configure(&TCAQBoeing12, MODE_EXCLUDED);
    Configure(&TCAQBoeing34, MODE_EXCLUDED);
    Configure(&TCAYokeBoeing, MODE_EXCLUDED);
    //Configure(&ViperTQS, MODE_EXCLUDED);
    Configure(&ViperBBox, MODE_EXCLUDED);
    Configure(&TCASidestickXPilot, MODE_EXCLUDED);
    Configure(&TCASidestickXCopilot, MODE_EXCLUDED);

    //Include only the HOTAS Cougar and ViperTQS
    Configure(&HCougar, MODE_KEEPENABLED);
    Configure(&ViperTQS, MODE_KEEPENABLED);
    Configure(&LMFD, MODE_KEEPENABLED);
    Configure(&RMFD, MODE_KEEPENABLED);
    
    if(Init(&EventHandle)) return 1;

    RegisterGameCallback(2323, &TCPCallback); // attach TCPCallback procedure to TCP port 1000

    SetKBRate(32, 50);
    SetKBLayout(KB_ENG);
    SetShiftButton(0, 0, 0, 0, 0, 0);
    
    // SetShiftButton(&HCougar, S3, &ViperTQS, Q_BTN10, Q_BTN9, IOTOGGLE+UDTOGGLE); // toggle for I/O and U/M/D

    ResetLeds();
    
    // Axis mapping Cougar
    MapAxis(&HCougar, JOYX, DX_X_AXIS);  //Cougar X (roll)
    MapAxis(&HCougar, JOYY, DX_Y_AXIS);  //Cougar Y (pitch)
    //MapAxis(&HCougar, RUDDER, DX_ZROT_AXIS);  //Cougar rudder pedals (yaw) - Rudder was removed from Cougar and has its own USB
    // Initialize Pitch Axis S Curve
    SetSCurve(&HCougar, JOYY, 0, 1, 0, -2, 0);
    ActKey(PULSE+KEYON+LED(&LMFD, LED_ONOFF, LED_CURRENT-LED2)); //set Left MFD LED 2 OFF
    ActKey(PULSE+KEYON+LED(&RMFD, LED_ONOFF, LED_CURRENT-LED1)); //set RMFD LED 1 OFF
 
    // Curve Testing
    //MapKey(&HCougar, S1, SEQ(EXEC("SetSCurve(&HCougar, JOYY, 0, 1, 0, 4, 0);"),EXEC("SetSCurve(&HCougar, JOYY, 0, 1, 0, 0, 0);")));
    
    // Curves for JOYY (pitch)
    // Set a desensitized scale for Precision gains
    // Normal: SetSCurve(&HCougar, JOYY, 0, 1, 0, 0, 0);
    // Precision: SetSCurve(&HCougar, JOYY, 0, 1, 0, 0, -4);
    // Scale: 0 = 100%, -1 = 70.92%, -2 = 50.30% -3 = 35.67%, -4 = 25.30%, -5 = 17.94% 
    
    // Use ANT ELEV Button to toggle scales for JOYY Precision (/AAR Gains/Landing Gains/Normal Flight)
    // Sets the Left MFD LED#2 (the top right LED Light) ON when AAR Gains are active,
	// Sets the Right MFD LED#1 (The top left LED) ON when Landing Gains are active, and Turns OFF Left MFD LED#2
	// Both LEDs OFF when Normal Flight Gains (Full Scale) are active 
    MapKey(&ViperTQS, Q_BTN11,	SEQ(
    							CHAIN(
    							EXEC("SetSCurve(&HCougar, JOYY, 0, 1, 0, 0, -2);"),
    							LED(&LMFD, LED_ONOFF, LED_CURRENT+LED2)
    							),
    							CHAIN(
    							EXEC("SetSCurve(&HCougar, JOYY, 0, 1, 0, 0, -1);"),
    							LED(&LMFD, LED_ONOFF, LED_CURRENT-LED2),
    							LED(&RMFD, LED_ONOFF, LED_CURRENT+LED1)
    							),
    							CHAIN(
    							EXEC("SetSCurve(&HCougar, JOYY, 0, 1, 0, -2, 0);"),
    							LED(&RMFD, LED_ONOFF, LED_CURRENT-LED1)
    							)
    						)
    					);
    
    
    // Set Brakes on Spare switch aft (to compensate for no Toebrakes on rudder pedals
    MapKey(&ViperTQS, Q_BTN15, 'k');   //this holds key k (brakes) when Q_BTN15 is held
    
    // Set Look Closer Toggle on spare switch forward. Moved to SHF T6 using BMS
    // MapKey(&ViperTQS, Q_BTN13, PULSE+'l');   //this fires key l (Look Forward) when Q_BTN15 is pressed

    // Map Trim Pitch and Roll to Hat 1
    // MapKey(&HCougar, H1U, PULSE+L_CTL+UARROW);
    // MapKey(&HCougar, H1D, PULSE+L_CTL+DARROW);
    // MapKey(&HCougar, H1L, PULSE+L_CTL+LARROW);
    // MapKey(&HCougar, H1R, PULSE+L_CTL+RARROW);

	//MFD LED Testing
	// MapKey(&ViperTQS, Q_BTN5, SEQ(LED(&RMFD, LED_ONOFF, LED_CURRENT+LED1),LED(&RMFD, LED_ONOFF, LED_CURRENT-LED1)));
        
// End main    
}

int EventHandle(int type, alias o, int x)
{
    DefaultMapping(&o, x);
}

int TCPCallback(int buf, int size)
{
    int i;

    char packet;
    Map(&packet, buf); Dim(&packet, size);

    char packet_string;
    Map(&packet_string, buf); Dim(&packet_string, size+1);
    packet_string[size] = 0; // null terminate so can be printed
    printf("%s : %d bytes received\xa", &packet_string, size);

    if (size == 0) return 0;
    
    if (packet[0] == 'q') // simulation exit
    {
        ResetLeds();
    }
    else if (packet[0] == 'r') // reset led states
    {
        ResetLeds();
    }
    else if (packet[0] == 'm')
    {
        // read the aircraft type
        
        // TODO for future expansion of other aircraft and throttle controllers
    }
    else if (packet[0] == 'u') // update status of lamps
    {
        SetLedStatus( packet[1]  - '0',
                      packet[2]  - '0',
                      packet[3]  - '0',
                      packet[4]  - '0',
                      packet[5]  - '0',
                      packet[6]  - '0',
                      packet[7]  - '0',
                      packet[8]  - '0',
                      packet[9]  - '0',
                      packet[10] - '0',
                      packet[11] - '0' );
    }
}

int ResetLeds()
{
    SetLED(&ViperTQS, LED_GEAR_NOSE,         LED_STATE_OFF);
    SetLED(&ViperTQS, LED_GEAR_LEFT,         LED_STATE_OFF);
    SetLED(&ViperTQS, LED_GEAR_RIGHT,        LED_STATE_OFF);
    SetLED(&ViperTQS, LED_GEAR_WARNING,      LED_STATE_OFF);
    SetLED(&ViperTQS, LED_RWR_SEARCH,        LED_STATE_OFF);
    SetLED(&ViperTQS, LED_RWR_A_POWER,       LED_STATE_OFF);
    SetLED(&ViperTQS, LED_RWR_LOW_ALT_GREEN, LED_STATE_OFF);
    SetLED(&ViperTQS, LED_RWR_LOW_ALT_RED,   LED_STATE_OFF);
    SetLED(&ViperTQS, LED_RWR_SYSTEM_POWER,  LED_STATE_OFF);
}

int SetLedStatus
(
    byte gear_nose_status,
    byte gear_left_status,
    byte gear_right_status,
    byte gear_warning_status,
    byte rwr_search_status,
    byte rwr_activity_status,
    byte rwr_a_power_status,
    byte rwr_alt_low_status,
    byte rwr_alt_status,
    byte rwr_system_power_status,
    byte speed_brake_position
)
{
    SetLED(&ViperTQS, LED_GEAR_NOSE,         gear_nose_status);
    SetLED(&ViperTQS, LED_GEAR_LEFT,         gear_left_status);
    SetLED(&ViperTQS, LED_GEAR_RIGHT,        gear_right_status);
    SetLED(&ViperTQS, LED_GEAR_WARNING,      gear_warning_status);

    SetLED(&ViperTQS, LED_RWR_SEARCH,        rwr_search_status);
    SetLED(&ViperTQS, LED_RWR_A_POWER,       rwr_activity_status);

    // Thrustmaster limitation for ACT/PWR indication - only one LED.
    // Power should be lit when rwr_system_power_status is on and A
    // should be light amber when rwr_activity_status is on.
    // One compromise would be to light the LED when rwr_system_power_status
    // is on and flash the LED if rwr_system_power_status is on and
    // rwr_activity_status is also on.
//    SetLED(&ViperTQS, LED_RWR_A_POWER,       rwr_a_power_status);

    if (rwr_alt_low_status == 1)
    {
        SetLED(&ViperTQS, LED_RWR_LOW_ALT_GREEN, LED_STATE_OFF);
        SetLED(&ViperTQS, LED_RWR_LOW_ALT_RED,   rwr_alt_low_status);
    }
    else
    {
        SetLED(&ViperTQS, LED_RWR_LOW_ALT_RED,   LED_STATE_OFF);
        SetLED(&ViperTQS, LED_RWR_LOW_ALT_GREEN, rwr_alt_status);
    }

    SetLED(&ViperTQS, LED_RWR_SYSTEM_POWER,  rwr_system_power_status);

    // Speed brake position indication
    SetLED(&ViperTQS, LED_USER_LEFT_1, (speed_brake_position >= 1));
    SetLED(&ViperTQS, LED_USER_RIGHT_1, (speed_brake_position >= 1));
    SetLED(&ViperTQS, LED_USER_LEFT_2, (speed_brake_position >= 2));
    SetLED(&ViperTQS, LED_USER_RIGHT_2, (speed_brake_position >= 2));
    SetLED(&ViperTQS, LED_USER_LEFT_3, (speed_brake_position >= 3));
    SetLED(&ViperTQS, LED_USER_RIGHT_3, (speed_brake_position >= 3));
    SetLED(&ViperTQS, LED_USER_LEFT_4, (speed_brake_position >= 4));
    SetLED(&ViperTQS, LED_USER_RIGHT_4, (speed_brake_position >= 4));
    SetLED(&ViperTQS, LED_USER_LEFT_5, (speed_brake_position >= 5));
    SetLED(&ViperTQS, LED_USER_RIGHT_5, (speed_brake_position >= 5));
}

int flash_led = 0;

int SetLED(alias dev, int led_index, int value)
{
    int i;
        
    if (value == 2)
    {
        // flash led
        if ((led_index == LED_RWR_SEARCH) & (flash_led == 0))
        {
            flash_led = 1;
            start_led_flash_loop();
        }
    }
    else
    {
        if ((led_index == LED_RWR_SEARCH) & (flash_led == 1))
        {
            flash_led = 0;
        }

        // turn led on or off

        // LEDV commands need to be sent multiple times to be certain they are executed on the device
        i = 0; while (i<3)
        {
            ActKey(PULSE+KEYON+LEDV( &dev, led_index, value ));
            i = i+1;
        }
    }
}

define FLASH_INTERVAL 250

int rwr_search_led_next_state;

int start_led_flash_loop()
{
    // FIRST CALL .. ON SOME EVENT
    rwr_search_led_next_state = LED_STATE_OFF;
    handle_flash_cycle(0);
}

int handle_flash_cycle(int cycle_num)
{
    int i;

    if (flash_led == 1)
    {
        // LEDV commands need to be sent multiple times to be certain they are executed on the device
        i = 0; while (i<3)
        {
            ActKey(PULSE+KEYON+LEDV( &ViperTQS, LED_RWR_SEARCH, rwr_search_led_next_state ));
            i = i+1;
        }

        // set next state of flashing led
        if ( rwr_search_led_next_state == LED_STATE_ON)
        {
            rwr_search_led_next_state = LED_STATE_OFF;
        }
        else
        {
            rwr_search_led_next_state = LED_STATE_ON;
        }

        // NEXT CYCLE LOOP
        DeferCall(FLASH_INTERVAL, &handle_flash_cycle, cycle_num + 1);
    }
}
